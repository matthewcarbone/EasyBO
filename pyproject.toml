[build-system]
requires = ["hatchling", "hatch-vcs", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"

[project]
name = "EasyBayes"
authors = [
    {"name" = "Matthew R. Carbone", "email" = "mcarbone@bnl.gov"}
]
maintainers = [
    {"name" = "Matthew R. Carbone", "email" = "mcarbone@bnl.gov"}
]
description = "Probabilistic modeling, Gaussian process and Bayesian optimization sandbox"
readme = "README.md"
requires-python = ">=3.11"
license = {"file" = "LICENSE"}
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Natural Language :: English",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
]
dependencies = [
    "numpy==1.26.0",
    "numpyro==0.13.2",
    "corner==2.2.2",
    "arviz==0.16.1",
    "torch==2.0.0",
    "gpytorch==1.11",
    "botorch==0.9.2",
]

# Dynamic version reads __version__ directly from my_package.__init__
dynamic = ["version"]

[tool.hatch.build.targets.wheel]
packages = ["easybayes"]


[project.optional-dependencies]
extra = [
    "matplotlib==3.8.0",
    "gpax==0.1.0",
    "jupyterlab==4.0.6",
]
dev = [
    "codecov",
    "coverage",
    "flake8",
    "pytest>=6",
    "pytest-cov>=3",
    "black",
    "nbstripout",
    "pre-commit",
    "nox==2023.4.22",
]
docs = [
    "sphinx",
    "numpydoc",
    "sphinx-copybutton",
    "sphinx_rtd_theme",
    "ipython",
]

[tool.hatch]
version.source = "vcs"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]


[tool.coverage]
run.source = ["easybayes"]
port.exclude_lines = [
  'pragma: no cover',
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.mypy]
files = ["easybayes"] #, "tests"]
python_version = "3.8"
warn_unused_configs = true
strict = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "easybayes.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true


[tool.ruff]
select = [
  "E", "F", "W", # flake8
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
]
extend-ignore = [
  "PLR",    # Design related pylint codes
  "E501",   # Line too long
]
src = ["easybayes"]
unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]
exclude = []
flake8-unused-arguments.ignore-variadic-names = true
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["easybayes._compat.typing"]

[tool.ruff.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]


[tool.pylint]
py-version = "3.8"
ignore-paths = [".*/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "wrong-import-position",
]
